var L=Object.defineProperty;var E=(r,e,t)=>e in r?L(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var h=(r,e,t)=>(E(r,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const l of s)if(l.type==="childList")for(const n of l.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function t(s){const l={};return s.integrity&&(l.integrity=s.integrity),s.referrerPolicy&&(l.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?l.credentials="include":s.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function i(s){if(s.ep)return;s.ep=!0;const l=t(s);fetch(s.href,l)}})();const y=5,P=7,c=600,m=100,g=c+m,q="#ffffff",w="#ff0000",O="#0000ff",b="#000000",z="#cccccc",S=[w,O];class x{constructor(e=3){h(this,"gridSize");h(this,"currentPlayer");h(this,"hlines");h(this,"vlines");h(this,"squares");h(this,"gameOver");h(this,"humanTurn");h(this,"squareCompletedLastTurn");h(this,"boxSize");h(this,"numstring");h(this,"waiting");this.currentPlayer=1,this.gridSize=e,this.hlines=Array.from({length:this.gridSize+1},()=>Array.from({length:e},()=>null)),this.vlines=Array.from({length:e},()=>Array.from({length:e+1},()=>null)),this.squares=Array.from({length:e},()=>Array.from({length:e},()=>0)),this.gameOver=!1,this.humanTurn=!0,this.squareCompletedLastTurn=!1,this.boxSize=(c-40)/this.gridSize,this.numstring=Array(this.gridSize**2).fill(0),this.waiting=!1}isGameOver(){for(let e=0;e<this.gridSize;e++)for(let t=0;t<this.gridSize;t++)if(this.squares[e][t]===0)return!1;return!0}updateLine(e,t){let i=1/0,s=null,l=null;for(let n=0;n<this.gridSize+1;n++){for(let o=0;o<this.gridSize;o++){const d=[o*this.boxSize+this.boxSize/2,n*this.boxSize],p=Math.hypot(d[0]-e,d[1]-t);o<this.gridSize&&!this.hlines[n][o]&&p<i&&(i=p,s=[n,o],l="h")}for(let o=0;o<this.gridSize+1;o++){const d=[o*this.boxSize,n*this.boxSize+this.boxSize/2],p=Math.hypot(d[0]-e,d[1]-t);n<this.gridSize&&!this.vlines[n][o]&&p<i&&(i=p,s=[n,o],l="v")}}if(s!==null){const[n,o]=s;l==="h"?(this.hlines[n][o]=S[this.currentPlayer-1],!this.updateSquares([n,o],"h")&&!this.squareCompletedLastTurn&&(this.currentPlayer=this.currentPlayer===1?2:1,this.humanTurn=!this.humanTurn)):l==="v"&&(this.vlines[n][o]=S[this.currentPlayer-1],!this.updateSquares([n,o],"v")&&!this.squareCompletedLastTurn&&(this.currentPlayer=this.currentPlayer===1?2:1,this.humanTurn=!this.humanTurn))}}checkSquareCompletionH(e,t){let i=!1;return e>0&&this.vlines[e-1][t]!==null&&this.vlines[e-1][t+1]!==null&&this.hlines[e-1][t]!==null&&(this.squares[e-1][t]=this.currentPlayer,i=!0),e<this.gridSize&&this.vlines[e][t]!==null&&this.vlines[e][t+1]!==null&&this.hlines[e+1][t]!==null&&(this.squares[e][t]=this.currentPlayer,i=!0),i}checkSquareCompletionV(e,t){let i=!1;return t>0&&this.hlines[e][t-1]!==null&&this.hlines[e+1][t-1]!==null&&this.vlines[e][t-1]!==null&&(this.squares[e][t-1]=this.currentPlayer,i=!0),t<this.gridSize&&this.hlines[e][t]!==null&&this.hlines[e+1][t]!==null&&this.vlines[e][t+1]!==null&&(this.squares[e][t]=this.currentPlayer,i=!0),i}updateSquares(e,t){const[i,s]=e;let l=!1;return t==="h"?l=this.checkSquareCompletionH(i,s):t==="v"&&(l=this.checkSquareCompletionV(i,s)),console.log("current board",JSON.stringify({verticalLines:this.vlines,horizontalLines:this.hlines},null,2)),l}fillBoxes(e){for(let i=0;i<this.gridSize;i++)for(let s=0;s<this.gridSize;s++)this.squares[i][s]!==0&&(e.fillStyle=S[this.squares[i][s]-1],e.fillRect(20+s*this.boxSize+y/2+10,20+i*this.boxSize+y/2+10,this.boxSize-y-2*10,this.boxSize-y-2*10))}drawLines(e){this.fillBoxes(e),e.lineWidth=y;for(let t=0;t<this.gridSize+1;t++)for(let i=0;i<this.gridSize;i++){const s=this.hlines[t][i]||z;e.strokeStyle=s,e.beginPath(),e.moveTo(20+i*this.boxSize,20+t*this.boxSize),e.lineTo(20+(i+1)*this.boxSize,20+t*this.boxSize),e.stroke()}for(let t=0;t<this.gridSize+1;t++)for(let i=0;i<this.gridSize+1;i++){if(t<this.gridSize){const s=this.vlines[t][i]||z;e.strokeStyle=s,e.beginPath(),e.moveTo(20+i*this.boxSize,20+t*this.boxSize),e.lineTo(20+i*this.boxSize,20+(t+1)*this.boxSize),e.stroke()}e.fillStyle=b,e.beginPath(),e.arc(20+i*this.boxSize,20+t*this.boxSize,P,0,2*Math.PI),e.fill()}}displayScores(e){const t=this.squares.flat().filter(n=>n===1).length,i=this.squares.flat().filter(n=>n===2).length;e.font="bold 24px sans-serif",e.fillStyle=b,e.fillRect(0,c,c,m),e.fillStyle=q,e.globalAlpha=.7,e.fillRect(0,c,c,m),e.globalAlpha=1,e.fillStyle=b,e.fillText(`You: ${t}`,20,c+m/2-10),e.fillText(`Computer: ${i}`,20,c+m/2+30),![...this.hlines,...this.vlines].flat().filter(Boolean).length||(v.textContent=this.humanTurn?"Your turn":"Computer turn")}getAvailableLines(){const e=[];for(let t=0;t<this.gridSize+1;t++)for(let i=0;i<this.gridSize;i++)this.hlines[t][i]||e.push(["h",t,i]);for(let t=0;t<this.gridSize;t++)for(let i=0;i<this.gridSize+1;i++)this.vlines[t][i]||e.push(["v",t,i]);return e}async getComputerMove(){const e={hlines:this.hlines,vlines:this.vlines,gridSize:this.gridSize};console.log({});const{host:t}=window.location,i=!t||t&&["127.0.0.1","localhost"].some(n=>t.includes(n));return(await fetch("https://chiefsmurph.com/dotsandboxes/get-computer-move",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(n=>n.json())).computer_move}async computerTurn(){this.waiting=!0,await new Promise(t=>setTimeout(t,1e3*Math.random())),this.squareCompletedLastTurn=!1;let e=!0;for(;e&&this.getAvailableLines().length>0;){e=!1;const t=await this.getComputerMove(),[i,s,l]=t;i==="h"?this.hlines[s][l]=S[this.currentPlayer-1]:i==="v"&&(this.vlines[s][l]=S[this.currentPlayer-1]),e=this.updateSquares([s,l],i),await new Promise(n=>setTimeout(n,2e3*Math.random()))}!e&&!this.squareCompletedLastTurn&&(this.currentPlayer=this.currentPlayer===1?2:1,this.humanTurn=!0),this.waiting=!1}}let a=null,u=null,f=null,C=null,v=null;function B(r,e){if(a=new x(r),u=document.getElementById("game-canvas"),!u)throw new Error("canvas not accessible");f=u.getContext("2d"),C=document.getElementById("game-result"),v=document.getElementById("game-status"),u.width=g-m,u.height=g,u.style.width=`${g-m}px`,u.style.height=`${g}px`,document.getElementById("options").style.display="none",document.getElementById("game-section").style.display="block",v.textContent=`Game on! ${e?"You start":"Computer starts!"}`,u.addEventListener("click",A),T()}function T(){if(!(!a||!f||!u)){if(f.fillStyle=q,f.fillRect(0,0,g,g),a.drawLines(f),a.displayScores(f),a.isGameOver()){a.gameOver=!0,u.style.cursor="default",v.textContent="";let r="";const e=a.squares.flat().filter(i=>i===1).length,t=a.squares.flat().filter(i=>i===2).length;e>t?r="YOU WON!":e<t?r="YOU SUCK":r="It's a tie!",v.textContent=r;return}else a.humanTurn?u.style.cursor="pointer":(u.style.cursor="default",!a.waiting&&a.computerTurn());requestAnimationFrame(T)}}function A(r){if(!a||a.waiting||!u)return;const e=u.getBoundingClientRect(),t=r.clientX-e.left,i=r.clientY-e.top;a.updateLine(t,i)}function I(){const r=parseInt(document.getElementById("grid-size").value);B(r,!0),document.getElementById("options").style.display="none",document.getElementById("game-section").style.display="block"}function M(){I(),C.textContent=""}function G(){document.getElementById("game-section").style.display="none",document.getElementById("options").style.display="block"}function H(){document.getElementById("start-button").addEventListener("click",I),document.getElementById("reset-game").addEventListener("click",M),document.getElementById("go-home").addEventListener("click",G)}document.querySelector("#app").innerHTML=`
  <h1 id="game-title">Dots and Boxes</h1>
  <div id="options">
    <label for="grid-size">Grid Size:</label>
    <select id="grid-size">
      <option value="3">3x3</option>
      <option value="4">4x4</option>
      <option value="5">5x5</option>
    </select>
    <button id="start-button">Start Game</button>
  </div>
  <div id="game-section">
    <h2 id="game-status">Game on!</h2>
    <canvas id="game-canvas"></canvas>
    <div class="button-container">
      <button id="reset-game">Reset Game</button>
      <button id="go-home">Go Home</button>
    </div>
  </div>
`;H();
